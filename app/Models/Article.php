<?php

namespace App\Models;

use App\Http\Controllers\FileUploader;
use App\Traits\Authorable;
use App\Traits\Commentable;
use App\Traits\Detailable;
use App\Traits\FavourableTrait;
use App\Traits\HasDescriptionDetail;
use App\Traits\Shareable;
use App\Traits\Taggable;
use Carbon\Carbon;
use Exception;
use http\Client;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Database\Eloquent\SoftDeletes;

class Article extends Model
{
    use Commentable, Detailable, Taggable, Authorable, Shareable, HasDescriptionDetail, FavourableTrait;
    protected $hidden = ['updated_at', 'pivot'];
    protected $appends = ['type_name', 'model_type', 'in_favourite'];
    protected $fillable = ['type', 'title', 'description'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function(Article $article) {
            if (!isset($article->attributes['published_at'])) {
                $article->published_at = Carbon::now();
            }
        });

        self::deleting(function(Article $article) {
            $details = $article->details()->get();
            foreach ($details as $detail) {
                $detail->delete();
            }
        });
    }

    #region Relations
    #endregion

    #region Accessors and Mutators

    public function setPublishedAtAttribute($value) {
        try {
            $this->attributes['published_at'] = Carbon::make($value);
        }
        catch(Exception $e) {

        }
    }

    public function getTypeNameAttribute() {
        $model_name = array_search(self::class, Relation::$morphMap);
        if (isset($this->attributes['type'])) {
            return trans('attributes.'.$this->type);
        }
        else if (isset($model_name)) {
            return trans('attributes.'.$model_name);
        }
        return '';
    }

    public function getModelTypeAttribute() {
        return array_search(self::class, Relation::$morphMap);
    }

    public function getRecommendationsAttribute() {
        $article_ids = UserTag::join('taggables', 'taggables.tag_id', 'user_tags.tag_id')
            ->where('user_id', User::$currentUser)
            ->where('taggable_type', 'article')
            ->where('taggable_id', '<>', $this->id)
            ->pluck('taggable_id');
        $articles = Article::whereIn('id', $article_ids)->inRandomOrder()->limit(3);

        if ($this->type) $articles = $articles->where('type', $this->type);

        return $articles->get();
    }

    public function getDescriptionAttribute() {
        if (count($this->details) > 0) {
            return $this->details->where('type', Detail::DESCRIPTION)->pluck('value')->first();
        }
        return null;
    }

    public function getInFavoriteAttribute() {
        $type = array_keys(Relation::$morphMap, self::class);
        return Favourable::where('favourable_type', $type ?? null)
            ->where('favourable_id', $this->id ?? null)
            ->where('user_id', User::$currentUser->id ?? null)
            ->exists();
    }



    /*    public function setImageAttribute($value) {
            if ($value) {
                $this->image = FileUploader::upload($value, 'articles');
            }
        }*/
    #endregion
}
