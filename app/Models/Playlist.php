<?php

namespace App\Models;

use App\Traits\Detailable;
use App\Traits\FavourableTrait;
use App\Traits\Taggable;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;

class Playlist extends Model
{
    use Detailable, Taggable, FavourableTrait;
    protected $fillable = ['title'];
    protected $hidden = ['created_at', 'updated_at', 'pivot'];
    protected $appends = ['is_new', 'time', 'model_type', 'in_favourite'];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function(Playlist $playlist) {
            if (!isset($playlist->attributes['published_at'])) {
                $playlist->published_at = Carbon::now();
            }
        });

        self::deleting(function(Playlist $playlist) {
            $details = $playlist->details()->get();
            foreach ($details as $detail) {
                $detail->delete();
            }
        });
    }

    public function getNote() {
        return Note::where('noteable', array_search(self::class, Relation::$morphMap))->first();
    }

    #region Relations

    public function records() {
        return $this->hasMany(Record::class);
    }

    public function comments() {
        return $this->morphMany(Comment::class, 'commentable')->orderBy('root_id')->orderBy('parent_id');
    }


    #endregion

    #region Accessors

    public function getIsNewAttribute() {
        return $this->created_at > Carbon::yesterday();
    }

    public function getTimeAttribute() {
        return $this->records()->selectRaw('SEC_TO_TIME( SUM(time_to_sec(`play_time`))) as time')->value('time');
    }

    public function getModelTypeAttribute() {
        return array_search(self::class, Relation::$morphMap);
    }


    #endregion

    #region Mutators
    #endregion

}
