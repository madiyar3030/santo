<?php

namespace App\Models;

use App\Traits\Commentable;
use App\Traits\Detailable;
use App\Traits\FavourableTrait;
use App\Traits\Shareable;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;

class Feeding extends Model
{
    const DATE_TYPES = [
        'day', 'week', 'month', 'year'
    ];
    const FEEDING_TYPES = [
        'feeding', 'recipe', 'breastfeeding'
    ];
    use Commentable, Detailable, Shareable, FavourableTrait;
    protected $hidden = ['created_at', 'updated_at', 'type'];
    protected $fillable = ['title', 'type', 'description', 'category_id', 'age_from', 'age_to', 'age_type'];
    protected $appends = ['model_type', 'date_name', 'applies_to', 'in_favourite'];
    protected $casts = [
        'age_from' => 'string',
        'age_to' => 'string',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function(Feeding $feeding) {
            if (!isset($feeding->attributes['published_at'])) {
                $feeding->published_at = Carbon::now();
            }
        });

        self::deleting(function(Feeding $feeding) {
            $details = $feeding->details()->get();
            foreach ($details as $detail) {
                $detail->delete();
            }
        });

    }

    public function isAppliedTo($birthDay) {
        $birthDay = Carbon::make($birthDay);
        $age = null;
        switch ($this->age_type) {
            case 'day':
                $age = $birthDay->floatDiffInDays(Carbon::now());
                break;
            case 'week':
                $age = $birthDay->diffInWeeks(Carbon::now());
                break;
            case 'month':
                $age = $birthDay->floatDiffInMonths(Carbon::now());
                break;
            case 'year':
                $age = $birthDay->floatDiffInYears(Carbon::now());
                break;
        }
        if (!is_null($age)) $age = round($age, 1);
        //dump($age.' '.$this->age_type.' |'.$this->age_from.'-'.$this->age_to.'| '.$child->name.' '.$this->title);
        if (!is_null($this->age_to)) {
            return $age >= $this->age_from && $age < $this->age_to;
        }
        else {
            switch ($this->type) {
                case self::FEEDING_TYPES[0]:
                    $age = $this->numberOfDecimals($this->age_from) ? $age : floor($age);
                    return $age == $this->age_from;
                    break;
                case self::FEEDING_TYPES[1]:
                    return $age >= $this->age_from;
                    break;
                case self::FEEDING_TYPES[2]:
                    $age = $this->numberOfDecimals($this->age_from) ? $age : floor($age);
                    return $age == $this->age_from;
                    break;
            }
        }
        return false;
    }

    public function getAppliesToAttribute() {
        $user = User::$currentUser;
        $children = $user->children;
        $arr = array();
        foreach ($children as $child) {
            $birthDate = Carbon::make($child->birth_date);
            if ($this->isAppliedTo($birthDate)) {
                array_push($arr, $child);
            }
        }
        return $arr;
    }

    public function category() {
        return $this->belongsTo(FeedingCategory::class);
    }

    public function comments() {
        return $this->morphMany(Comment::class, 'commentable')->orderBy('root_id')->orderBy('parent_id');
    }

    public function getModelTypeAttribute() {
        return array_search(self::class, Relation::$morphMap);
    }

    public function getDateNameAttribute() {
        if (!is_null($this->age_to)) {
            $date_name = trans('attributes.date_from_to_choice.' . $this->age_type);
        }
        else {
            switch ($this->type) {
                case self::FEEDING_TYPES[0]:
                    $date_name = trans_choice('attributes.date_single_choice.' . $this->age_type, $this->age_from);
                    break;
                case self::FEEDING_TYPES[1]:
                    $date_name = trans_choice('attributes.date_from_choice.' . $this->age_type, $this->age_from);
                    break;
                case self::FEEDING_TYPES[2]:
                    $date_name = trans_choice('attributes.date_single_choice.' . $this->age_type, $this->age_from);
                    break;
                default:
                    $date_name = trans_choice('attributes.date_single_choice.' . $this->age_type, $this->age_from);
                    break;
            }
        }
        /*if (is_null($this->age_to)) {
            $date_name = trans_choice('attributes.date_from_choice.' . $this->age_type, $this->age_from);
        }
        else {
            $date_name = trans('attributes.date_from_to_choice.'.$this->age_type);
        }*/
        return $date_name;
    }

    public function getRecommendationsAttribute() {
        $feedings = Feeding::where('category_id', $this->category_id)->where('id', '<>', $this->id);
        $feedings = $feedings->where('type', $this->type);

        $feedings = $feedings->inRandomOrder()->limit(3)->get();
        return $feedings;
    }

    function numberOfDecimals($value)
    {
        if ((int)$value == $value)
        {
            return 0;
        }
        else if (! is_numeric($value))
        {
            // throw new Exception('numberOfDecimals: ' . $value . ' is not a number!');
            return false;
        }

        return strlen($value) - strrpos($value, '.') - 1;
    }
}
