<?php

namespace App\Models;

use App\Traits\Authorable;
use App\Traits\Commentable;
use App\Traits\Detailable;
use App\Traits\FavourableTrait;
use App\Traits\Imageable;
use App\Traits\Shareable;
use App\Traits\Taggable;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;

class Consultation extends Model
{
    use Commentable, Authorable, Taggable, Detailable, Imageable, Shareable, FavourableTrait;

    protected $appends = ['model_type', 'type_name', 'in_favourite'];
    protected $hidden = ['published_at', 'updated_at', 'show', 'author_id', 'answer_id', 'image_url'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function(Consultation $consultation) {
            if (!isset($consultation->attributes['published_at'])) {
                $consultation->published_at = Carbon::now();
            }
        });

        self::deleting(function(Consultation $consultation) {
            $details = $consultation->details()->get();
            foreach ($details as $detail) {
                $detail->delete();
            }
        });
    }
    #region Relations

    public function answer() {
        return $this->belongsTo(ConsultationAnswer::class);
    }

    #endregion

    #region Mutators
    #endregion

    #region Accessors
    public function getTypeNameAttribute() {
        $model_name = array_search(self::class, Relation::$morphMap);
        if (isset($this->attributes['type'])) {
            return trans('attributes.'.$this->type);
        }
        else if (isset($model_name)) {
            return trans('attributes.'.$model_name);
        }
        return '';
    }

    public function getModelTypeAttribute() {
        return array_search(self::class, Relation::$morphMap);
    }

    public function image_url() {
        return $this->morphOne(Image::class, 'imageable');
    }

    /*public function getImageAttribute() {
        if (!$this->image_url) return null;
        return $this->image_url->url;
    }*/
    #endregion
}
